33.	Write a program to demonstrate functionalities of this keyword in java. 
class Employee{
	private int empId;	
	private String empName;
	Employee()
	{
	 // this.empId=101;
	 //this.empName="Rupali";
                      this(103,"Pallavi");	
                       this.empId=104;
	 this.empName="rups";
                      System.out.println("1 para  "+this);
	}
          	Employee(int empId,String empName)
	{
		 this.empId=empId;
	 	 this.empName=empName;	
                           	System.out.println("2 para  "+this);
	}
           	void show(){	
	 	System.out.println("Employee id: "+empId+" 	Employee Name "+empName);
	}
}

class Q33
{
   public static void main(String args[]){
   Employee e=new Employee();
   e.show();
    /*Employee e1=new Employee(102,"Sonali");
   e1.show();*/
}
}
==================================================================================
34.	Create a class Circle that has two data members, one to store the radius and another to store area and three methods first init() method to input radius from user, second calculateArea() method to calculate area of circle and third display() method to display values of radius and area. Create class CircleDemo ( main class) that creates the Circle object and calls init(), calculateArea() and display() methods.
class Circle{
	private int radius;	
	private double area;
                     private double  PI;
	Circle()
	{
	  this.radius=4;
                       this.PI=3.14;
                      System.out.println("0 para  "+this);
	}
          	Circle(int radius)
	{
		 this.radius=radius;
    		this.PI=3.14;
	 	 System.out.println("1 para  "+this);
	}
	void init(int radius)
                      {
                        this.radius=radius;
                        this.PI=3.14;
	}
	void calculateArea()
                      {
                         this.area=radius*PI*radius;
                      }
           	void display(){	
	 	System.out.println("Area of circle is: "+area);
	}
}

class Q34
{
   public static void main(String args[]){
   Circle c=new Circle(3);
   //c.init(5);
   c.calculateArea();
   c.display();
}
}
========================================================================================
35.	Create a class MathOperation that has four static methods. add() method that takes two integer numbers as parameter and returns the sum of the numbers. subtract() method that takes two integer numbers as parameter and returns the difference of the numbers. multiply() method that takes two integer numbers as parameter and returns the product. power() method that takes two integer numbers as parameter and returns the power of first number to second number. Create another class Demo (main class) that takes the two numbers from the user and calls all four methods of MathOperation class by providing entered numbers and prints the return values of every method.
import java.util.Scanner;
class MathOperations{
                    static int add(int a,int b)
                      {
                          return a+b;
	}
	static int sub(int a,int b)
                      {
                          return a-b;
	}
	static int multiply(int a,int b)
                      {
                          return a*b;
	}
	static int power(int a,int b)
                      {
                          int result=1;
                          while(b!=0)
	     {
                              result*=a;
                              --b;
	      }
                         return result;
	}
	static void show(int result)
                      {
                        System.out.println("Addition of number is "+result); 
                      }
           	
}

class Q35
{
   public static void main(String args[]){
   Scanner sc=new Scanner(System.in);
   System.out.println("Enter First Number");
   int a=sc.nextInt();
   System.out.println("Enter Second Number");
   int b=sc.nextInt();
   int result=0;
   result= MathOperations.add(a,b);
   MathOperations.show(result);
   result= MathOperations.sub(a,b);
   MathOperations.show(result);
   result= MathOperations.multiply(a,b);
   MathOperations.show(result);
    result= MathOperations.power(a,b);
   MathOperations.show(result);
}
}
======================================================================================================================

36.	Create a class MathOperation containing overloaded methods ‘multiply’ to calculate multiplication of following arguments. 
a.	 two integers 
b.	 three floats 
c.	 all elements of array 
d.	one double and one integer 
import java.util.Scanner;
class MathOperations{
                    void multiply(int a,int b)
                     {
 	  int result=a+b;
	  System.out.println("Addition of two interer value: "+result);
	}
	void multiply(float a,float b,float c)
                     {
 	  float result=a+b+c;
	  System.out.println("Addition of three float value: "+result);
	}
                     void multiply(double a,int b)
                     {
 	  double result=a+b;
	  System.out.println("Addition of three float value: "+result);
	}

}

class Q36
{
   public static void main(String args[]){
  // Scanner sc=new Scanner(System.in);
   MathOperations mo=new MathOperations();
   mo.multiply(2,2);
   mo.multiply(2.1f,2.5f,7.9f);
   mo.multiply(2.888,2);
   
}
}
======================================================================================
37.	Create a class Person with properties (name and age) with following features. 
a.	Default age of person should be 18.
b.	A person object can be initialized with name and age.
c.	Method to display name and age of person
Create another class PersonDemo ( main class ) that demonstrates the functionalities of Person class by creating Person object and calling methods.
import java.util.Scanner;
class Person{
                    private String name;
                    private int age;
                    Person(String name)
                    { 
	 this.name=name;
                      this.age=18;
                     }
                     Person(String name,int age)
	{
                           this.name=name;
                           this.age=age;
	}
 	void display()
	{
                             System.out.println("Name: "+name+" Age "+age);
	}
}

class Q37
{
   public static void main(String args[]){
   Scanner sc=new Scanner(System.in);
    System.out.println("Enter name of person: ");
   String name=sc.next();
   Person p=new Person(name);
   p.display();
System.out.println("Enter name and age of person: ");
  String name1=sc.next();
  int age1=sc.nextInt();
   Person p1=new Person(name1,age1);
   p1.display();
   
}
}

==================================================================================================
38.	Create a class Employee with three data members (empNo, salary and totalSalary) and following features.
a.	Only parameterized constructor. [Do not overload the constructor]
b.	totalSalary always represents salary total of all the employees created.
c.	empNo should be auto incremented.
d.	display total employees and totalSalary using a method.
Create another class EmployeeDemo (main class) that creates some Employee objects and calls Employee method to display no. of employees and total of their salaries.
import java.util.Scanner;
class Employee{
	private static int count=0;
	private static int empNo;
	private double salary;
	private static double totalsalary;
	
	Employee()
	{

	}
	Employee(double salary){
		this.empNo=++count;
		this.salary=salary;
		this.totalsalary+=salary;
	}

	void totalsalary()
	{
                        	System.out.println("Total salary Of the employeeis: "+totalsalary);
	}	

	void totalemployees()
	{
		System.out.println("Total Employess : "+empNo);
	}
	}

class Q38
{
   public static void main(String args[]){
   Scanner sc=new Scanner(System.in);
  for(int i=0;i<=3;i++)
{
    System.out.println("Enter Salary of employees ");
   double salary=sc.nextDouble();
  Employee e1=new Employee(salary);
  } 
  Employee e2=new Employee();
  e2.totalsalary();
  e2.totalemployees();
}
}
==============================================================================================

39.	Create class Product with three data members (pid, price, quantity) and parameterized constructor that takes values for all three data members.  
Create a main method in different class (say ProductDemo) and perform following task:
a. Accept information for five Product objects from user and store objects in an array
b. Find pid of product with highest price. 
c. Create a static method (with array of product’s object as argument) in Product class to calculate and return total amount spent on all products. ( amount spent on single product = price of product * quantity of product )
import java.util.Scanner;
class Product{
	private int pid;
	private double price;
	private int quantity;

	Product(int pid,double price,int quantity){
		this.pid=pid;
		this.price=price;
		this.quantity=quantity;
	}
	void display(){
		
		System.out.println("Pid: "+pid+"  Price "+price+"  Quantity "+quantity);
	}
	

	double getprice(){
 		return(this.price);
	}
	int getppid(){
 		return(this.pid);
	}
	static double totalAmount(Product p[]){
		double total=0;
		for(int i=0;i<p.length;i++){
			total+=((p[i].price)*(p[i].quantity));                                  		
		}
		return total;
	}


}
class Q039{
public static void main(String args[]){
 	Product p[]=new Product[3];
   	int pid;
	int quantity;
 	double price;	
	Scanner sc=new Scanner(System.in);
	for(int i=0;i<p.length;i++){
		System.out.println("Enter Pid, Price, Quantity: ");
                              	pid=sc.nextInt();
		price=sc.nextDouble();
		quantity=sc.nextInt();
		p[i]=new Product(pid,price,quantity);
	}

	System.out.println("Product Details: ");
                      for(Product a:p){
		a.display();
	}
                    double temp=0;
                     int ppid=0;
                 	for(int i=0;i<p.length;i++){
		temp=p[i].getprice();
		ppid=p[i].getppid();
		for(int j=0;j<p.length;j++){
		 if(temp>p[i].getprice()){
			temp=p[i].getprice();
			ppid=p[i].getppid();
		}
		}
	}
	System.out.println("Maximum Price of prodoct and Pid is: 	"+ppid+"  "+temp);
	
	System.out.println("Total amount of the products: "+Product.totalAmount(p));
	
}}
=================================================================================================
40.	Create a class Student having data members name, roll no., age and score. Write a program to accept 10 records of student and store them in an array. And then arrange the student records based on the score group [0-50], [50-65], [65-80], [80-100].
import java.util.Scanner;
class Student{
	private String name;
	private int rollno;
	private int age;
	private int score;

	Student(String name,int age,int rollno,int score){
		this.name=name;
		this.rollno=rollno;
		this.age=age;
		this.score=score;
	}

	int getscore(){
		return score;
	}
	void display()
	{
		System.out.println("Name:"+name+" Age:"+age+" Roll No:"+rollno+" Score:"+score);
	}

}


class Q40{
public static void main(String args[]){
 	Scanner sc=new Scanner(System.in);
	Student s[]=new Student[3];
                     String name;
	int age,rollno,score;
	System.out.println("Enter Name, Age, Roll No, 	Score: ");
	for(int i=0;i<s.length;i++){
	name=sc.next();
	age=sc.nextInt();
	rollno=sc.nextInt();
	score=sc.nextInt();	
                  	s[i]=new Student(name,age,rollno,score);
	}
	for(Student a:s){
		a.display();
	}
	System.out.println("============================================");
                      System.out.println("Students Record Whose Score Between {0-50}");
	for(int i=0;i<s.length;i++){
		if(s[i].getscore() > 0 && s[i].getscore()<=50){
			s[i].display();
		}
	}
	System.out.println("============================================");
   	System.out.println("Students Record Whose Score Between {50-65}");
	for(int i=0;i<s.length;i++){
		if(s[i].getscore() > 50 && s[i].getscore()<=65){
			s[i].display();
		}
	}
	System.out.println("============================================");
	System.out.println("Students Record Whose Score Between {65-80}");
	for(int i=0;i<s.length;i++){
		if(s[i].getscore() > 65 && s[i].getscore()<=80){
			s[i].display();
		}
	}

	System.out.println("============================================");
                      System.out.println("Students Record Whose Score Between {80-100}");
	for(int i=0;i<s.length;i++){
		if(s[i].getscore() > 80 && s[i].getscore()<=100){
			s[i].display();
		}
	}
	
}}
41.	Write a program to demonstrate this() construct functionality.
==================================================================================================
42.	Create a class Tile to store the edge length of a square tile, and create another class Floor to store length and width of a rectangular floor. Add method totalTiles(Tile t) in Floor class with Tile as argument to calculate the whole number of tiles needed to cover the floor completely.
import java.util.Scanner;
class Tile{
	int edge;
	 double area;
	Tile(int edge){
		this.edge=edge;
		this.area=edge*edge;
	}
}

class Floor{
	int l;
	 int w;
	 double area; 
	Floor(int l,int w){
		this.l=l;
		this.w=w;
		this.area=l*w;
	}
 	double totaltiles(Tile t)
	{
                           return (this.area/t.area);
	}
}

class Q42{
public static void main(String args[]){
 	Scanner sc=new Scanner(System.in);
	Tile t=new Tile(10);
	Floor f=new Floor(100,200);
                     double tt=f.totaltiles(t);
	System.out.println("Total Tiles Required: "+tt);
}}
====================================================================================
43.	Create a class OneBHK with instance variables roomArea, hallArea and price. Then create default constructor that initializes instance variables with some values and a parameterized constructor that takes values for all instance variables and stores them in instance variables. Now create a method named show()  to print OneBHK’s instance variable values.
Create another class TwoBHK which has (inherites) all the properties and behaviors of OneBHK and a new instance variable room2Area. Then create default constructor to initialize all 4 instance variables and a parameterized constructor to take the values for initialization of all instance variables. Override show() method to print all data member information.
Write main method in another class (Say Demo) and store three TwoBHK flat’s information and print information using show method. Also print total amount of all flats. 

import java.util.Scanner;
class OneBHK{
	double roomArea;
	double hallArea;
	double price;

	OneBHK(double roomArea,double hallArea,double price){
		this.roomArea=roomArea;
		this.hallArea=hallArea;
		this.price=price;
	}

	void show(){
		System.out.println("Room Area 1: "+roomArea+" Hall 	Area:"+hallArea+" Price:"+price);
	}
}

class TwoBHK extends OneBHK{
	double roomArea2;
	TwoBHK(double roomArea,double hallArea,double price,double roomArea2){
                                          super(roomArea, hallArea, price);
		this.roomArea2=roomArea2;
		
	}

	void show(){
		super.show();
		System.out.println("Room Area 2: "+roomArea2);
	}
}

class Q43{
public static void main(String args[]){
 	Scanner sc=new Scanner(System.in);
	double total = 0.00;
	TwoBHK []tb=new TwoBHK[3];
	for(int i=0;i<tb.length;i++){
		System.out.println("Enter Room1 area:  ");
		double ra1=sc.nextDouble();
		System.out.println("Enter Hall area:  ");
		double ha=sc.nextDouble();
		System.out.println("Enter Price:  ");
		double price=sc.nextDouble();
		 total += price;
		System.out.println("Enter Room2 area:  ");	
		double ra2=sc.nextDouble();
		
                                          TwoBHK tb1=new TwoBHK(ra1,ha,price,ra2);
		tb[i]=tb1;
                                           
	}
	for(TwoBHK a: tb){
		a.show();
	}
	System.out.println("Total Prize of the flats: "+total);
}}
